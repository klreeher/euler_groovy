/*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

Integer limit = 300

/*while (count <= limit){
    def sum = fib1 + fib2
    println(sum)
    fib1 = fib2
    fib2 = sum
    count ++

}

limit = 10

count = 0
*/

List<Integer> fibSeq = [1, 2]

Integer one = 0
Integer two = 1
while (fibSeq.size() <= limit && fibSeq.last() <= 4000000 ){
    //println(fibSeq.last())
    def next = fibSeq.get(one) + fibSeq.get(two)
    fibSeq.add(next)
    one++
    two++
}
println('fibonacci sequence whose value is less than 4 000 000')
fibSeq = (fibSeq-fibSeq.last())
println(fibSeq)

static ArrayList<Integer> getMultiplesOf(List<Integer> range, Integer target) {
    return range.findAll { it % target == 0 }
}

println('EVEN fib sequence < 4 000 000')
println(getMultiplesOf(fibSeq, 2))
println(getMultiplesOf(fibSeq, 2).unique().sum())